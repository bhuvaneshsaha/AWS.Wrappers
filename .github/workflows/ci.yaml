
name: CI Pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  # manual
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
        CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --collect:"XPlat Code Coverage"
    - name: Copy coverage report
      run: |
          mkdir -p coverage
          cp AWS.S3.Wrapper.Tests/TestResults/*/coverage.cobertura.xml coverage/coverage.cobertura.xml
    - name: Install cURL
      run: sudo apt-get install curl -y
    - name: Download and run Codacy script
      run: |
        curl -Ls https://coverage.codacy.com/get.sh -o codacy_script.sh
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3

  sonar-analysis:
    name: Build and analyze
    runs-on: windows-latest
    needs: build
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Install coverage tools
        run: |
          dotnet tool install --global dotnet-coverage
      - name: Build and analyze
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"bhuvaneshsaha" /o:"bhuvaneshsaha" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml
          dotnet build --no-incremental
          dotnet-coverage collect "dotnet test" -f xml -o "coverage.xml"
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
